  0%|                                                                          | 6/100000 [00:09<45:33:50,  1.64s/it]
Traceback (most recent call last):
  File "/home/autolab/wander/Diffusion_OOD_Detection/3_pos_ood_compensation/diffusion_bc.py", line 492, in <module>
    train(args)
  File "/home/autolab/wander/Diffusion_OOD_Detection/3_pos_ood_compensation/diffusion_bc.py", line 416, in train
    loss = diffusion_model.diffusion_train_step(state_distribution, states_tensor, None)
  File "../diffusion/karras.py", line 74, in diffusion_train_step
    diffusion_loss = self.diffusion_loss(model, x, cond, t_chosen, noise, return_denoised)
  File "../diffusion/karras.py", line 105, in diffusion_loss
    model_output = model(x_1 * c_in, cond, t)
  File "/home/autolab/anaconda3/envs/svr/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/autolab/anaconda3/envs/svr/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "../diffusion/mlps.py", line 138, in forward
    x = self.layers(x)
  File "/home/autolab/anaconda3/envs/svr/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/autolab/anaconda3/envs/svr/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "../diffusion/mlps.py", line 59, in forward
    x = layer(x)
  File "/home/autolab/anaconda3/envs/svr/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/autolab/anaconda3/envs/svr/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/autolab/anaconda3/envs/svr/lib/python3.9/site-packages/torch/nn/modules/linear.py", line 125, in forward
    return F.linear(input, self.weight, self.bias)
KeyboardInterrupt
